{"version":3,"sources":["../../src/components/BuiltInInput.jsx","../../src/components/CustomInput.jsx","../../src/index.js","App.js","index.js"],"names":["AS_TYPE_MAP","input","textarea","BuiltInInput","as","inputProps","inputRef","inputValue","withChangesSubmitOnEnter","hideInput","submitInput","setInputValue","AsInput","handleKeyDown","useCallback","e","handleChange","autoFocus","ref","value","onChange","onKeyDown","CustomInput","children","cloneElement","activator","valuePresenter","closeOnOutsideClick","defaultInputValue","emptyValue","useRef","useState","isInputVisible","setIsInputVisible","target","useEffect","document","showInput","handleWrapperClick","activatorClick","valuePresentation","onClick","renderValuePresentation","App","console","log","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.75a0ebec.chunk.js","sourcesContent":["import React, { useCallback } from 'react'\n\nconst AS_TYPE_MAP = {\n  input: <input />,\n  textarea: <textarea />\n}\n\nexport default function BuiltInInput({\n  as,\n  inputProps,\n  inputRef,\n  inputValue,\n  withChangesSubmitOnEnter,\n  hideInput,\n  submitInput,\n  setInputValue\n}) {\n  let AsInput = AS_TYPE_MAP[as]\n  if (!AsInput) { AsInput = <input /> }\n\n  const handleKeyDown = useCallback(\n    (e) => {\n      if (withChangesSubmitOnEnter && e.key === 'Enter') {\n        e.preventDefault()\n        hideInput()\n        submitInput()\n      }\n      inputProps.onKeyDown && inputProps.onKeyDown(e)\n    },\n    [withChangesSubmitOnEnter, hideInput, submitInput, inputProps]\n  )\n\n  const handleChange = useCallback(\n    (e) => {\n      setInputValue(e.target.value)\n      inputProps.onChange && inputProps.onChange(e)\n    },\n    [setInputValue, inputProps]\n  )\n\n  return (\n    <AsInput.type\n      {...inputProps}\n      autoFocus\n      ref={inputRef}\n      value={inputValue}\n      onChange={handleChange}\n      onKeyDown={handleKeyDown}\n    />\n  )\n}\n","import { useCallback, cloneElement } from 'react'\n\nexport default function CustomInput({\n  inputRef,\n  inputValue,\n  hideInput,\n  submitInput,\n  setInputValue,\n  withChangesSubmitOnEnter,\n  children\n}) {\n  const handleKeyDown = useCallback(\n    (e) => {\n      if (withChangesSubmitOnEnter && e.key === 'Enter') {\n        e.preventDefault()\n        hideInput()\n        submitInput()\n      }\n      children.props.onKeyDown && children.props.onKeyDown(e)\n    },\n    [withChangesSubmitOnEnter, hideInput, submitInput, children]\n  )\n\n  const handleChange = useCallback(\n    (e) => {\n      setInputValue(e.target.value)\n      children.props.onChange && children.props.onChange(e)\n    },\n    [setInputValue, children]\n  )\n\n  return cloneElement(children, {\n    ref: inputRef,\n    value: inputValue,\n    onChange: handleChange,\n    onKeyDown: handleKeyDown\n  })\n}\n","import React, {\n  useState,\n  useEffect,\n  useCallback,\n  useRef,\n  Fragment,\n  cloneElement\n} from 'react'\nimport BuiltInInput from './components/BuiltInInput'\nimport CustomInput from './components/CustomInput'\n\nexport default function InplaceEditor({\n  children,\n  onChange,\n  activator,\n  valuePresenter,\n  closeOnOutsideClick = true,\n  withChangesSubmitOnEnter = true,\n  inputProps = {},\n  defaultInputValue = '',\n  emptyValue = 'empty value',\n  as = 'input'\n}) {\n  const inputRef = useRef(null)\n  const [isInputVisible, setIsInputVisible] = useState(false)\n  const [inputValue, setInputValue] = useState(defaultInputValue)\n\n  useEffect(() => {\n    if (isInputVisible) {\n      document.addEventListener('click', handleClickOutside)\n\n      return () => {\n        document.removeEventListener('click', handleClickOutside)\n      }\n    }\n  }, [inputValue, isInputVisible])\n\n  function handleClickOutside(e) {\n    const target = e.target\n\n    if (closeOnOutsideClick && target !== inputRef.current) {\n      setIsInputVisible(false)\n      submitInput()\n    }\n  }\n\n  const showInput = useCallback(() => {\n    setIsInputVisible(true)\n  }, [setIsInputVisible])\n\n  const hideInput = useCallback(() => {\n    setIsInputVisible(false)\n  }, [setIsInputVisible])\n\n  const submitInput = useCallback(() => {\n    onChange && onChange(inputValue)\n  }, [inputValue, onChange])\n\n  function renderInput() {\n    if (children) {\n      return (\n        <CustomInput\n          inputRef={inputRef}\n          inputValue={inputValue}\n          withChangesSubmitOnEnter={withChangesSubmitOnEnter}\n          hideInput={hideInput}\n          submitInput={submitInput}\n          setInputValue={setInputValue}\n          children={children}\n        />\n      )\n    }\n\n    return (\n      <BuiltInInput\n        as={as}\n        inputProps={inputProps}\n        inputRef={inputRef}\n        inputValue={inputValue}\n        withChangesSubmitOnEnter={withChangesSubmitOnEnter}\n        hideInput={hideInput}\n        submitInput={submitInput}\n        setInputValue={setInputValue}\n      />\n    )\n  }\n\n  const handleWrapperClick = useCallback(() => {\n    if (activator) {\n      return\n    }\n\n    showInput()\n  }, [activator, showInput])\n\n  const activatorClick = useCallback(\n    (e) => {\n      showInput()\n      activator.props.onClick && activator.props.onClick(e)\n    },\n    [showInput]\n  )\n\n  function renderValuePresentation() {\n    let valuePresentation = inputValue || emptyValue\n    if (valuePresenter) {\n      valuePresentation = valuePresenter(inputValue)\n    }\n\n    return <div onClick={handleWrapperClick}>{valuePresentation}</div>\n  }\n\n  function renderActivator() {\n    return cloneElement(activator, { onClick: activatorClick })\n  }\n\n  return (\n    <Fragment>\n      {isInputVisible ? renderInput() : renderValuePresentation()}\n      {activator && renderActivator()}\n    </Fragment>\n  )\n}\n","import React from 'react';\nimport 'react-inplace-editor/dist/index.css';\nimport InplaceEditor from 'react-inplace-editor';\n\nconst App = () => {\n  return (\n    <InplaceEditor\n      withChangesSubmitOnEnter\n      defaultInputValue=\"test value\"\n      onChange={(value) => { console.log(value) }}\n      activator={<div>Click here for input showing!</div>}\n      valuePresenter={(value) => (<div>Example: {value}</div>)}\n    >\n      <input autoFocus />\n    </InplaceEditor>\n  );\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}